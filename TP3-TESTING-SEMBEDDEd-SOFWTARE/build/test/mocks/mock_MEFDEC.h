/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MEFDEC_H
#define _MOCK_MEFDEC_H

#include "MEFDEC.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_MEFDEC_Init(void);
void mock_MEFDEC_Destroy(void);
void mock_MEFDEC_Verify(void);




#define fsmDECInit_Ignore() fsmDECInit_CMockIgnore()
void fsmDECInit_CMockIgnore(void);
#define fsmDECInit_Expect(cmock_arg1, cmock_arg2) fsmDECInit_CMockExpect(__LINE__, cmock_arg1, cmock_arg2)
void fsmDECInit_CMockExpect(UNITY_LINE_TYPE cmock_line, DataDEC_t* cmock_arg1, gpioMap_t cmock_arg2);
typedef void (* CMOCK_fsmDECInit_CALLBACK)(DataDEC_t* cmock_arg1, gpioMap_t cmock_arg2, int cmock_num_calls);
void fsmDECInit_StubWithCallback(CMOCK_fsmDECInit_CALLBACK Callback);
#define fsmDECUpdate_Ignore() fsmDECUpdate_CMockIgnore()
void fsmDECUpdate_CMockIgnore(void);
#define fsmDECUpdate_Expect(cmock_arg1) fsmDECUpdate_CMockExpect(__LINE__, cmock_arg1)
void fsmDECUpdate_CMockExpect(UNITY_LINE_TYPE cmock_line, DataDEC_t* cmock_arg1);
typedef void (* CMOCK_fsmDECUpdate_CALLBACK)(DataDEC_t* cmock_arg1, int cmock_num_calls);
void fsmDECUpdate_StubWithCallback(CMOCK_fsmDECUpdate_CALLBACK Callback);
#define DEC_Init_Ignore() DEC_Init_CMockIgnore()
void DEC_Init_CMockIgnore(void);
#define DEC_Init_Expect() DEC_Init_CMockExpect(__LINE__)
void DEC_Init_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_DEC_Init_CALLBACK)(int cmock_num_calls);
void DEC_Init_StubWithCallback(CMOCK_DEC_Init_CALLBACK Callback);
#define _sleep_idle_IgnoreAndReturn(cmock_retval) _sleep_idle_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void _sleep_idle_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool_t cmock_to_return);
#define _sleep_idle_ExpectAndReturn(pDEC_Update, cmock_retval) _sleep_idle_CMockExpectAndReturn(__LINE__, pDEC_Update, cmock_retval)
void _sleep_idle_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, DataDEC_t* pDEC_Update, bool_t cmock_to_return);
typedef bool_t (* CMOCK__sleep_idle_CALLBACK)(DataDEC_t* pDEC_Update, int cmock_num_calls);
void _sleep_idle_StubWithCallback(CMOCK__sleep_idle_CALLBACK Callback);
#define fsmgetstate_IgnoreAndReturn(cmock_retval) fsmgetstate_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void fsmgetstate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, fsmDEC_t cmock_to_return);
#define fsmgetstate_ExpectAndReturn(pDEC_state, cmock_retval) fsmgetstate_CMockExpectAndReturn(__LINE__, pDEC_state, cmock_retval)
void fsmgetstate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, DataDEC_t* pDEC_state, fsmDEC_t cmock_to_return);
typedef fsmDEC_t (* CMOCK_fsmgetstate_CALLBACK)(DataDEC_t* pDEC_state, int cmock_num_calls);
void fsmgetstate_StubWithCallback(CMOCK_fsmgetstate_CALLBACK Callback);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
